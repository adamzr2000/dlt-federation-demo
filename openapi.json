{"openapi":"3.1.0","info":{"title":"DLT Service Federation API","description":"This API provides endpoints for interacting with the DLT (Permissioned Blockchain Network + Federation Smart Contract) and functions as a custom-built orchestrator that interacts with the virtual infrastructure on Docker/Kubernetes.","version":"1.0.0"},"paths":{"/web3_info":{"get":{"tags":["Default DLT federation functions"],"summary":"Get Web3 and Ethereum node info","description":"Retrieve Ethereum node and Web3 connection details.\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - ethereum_node_url (str): The URL of the connected Ethereum node.\n        - ethereum_address (str): The Ethereum address associated with the connected node.\n        - contract_address (str): The address of the deployed Federation Smart Contract (SC).\n\nRaises:\n    HTTPException:\n        - 500: If there is an issue retrieving the Ethereum node or Web3 connection information.","operationId":"web3_info_endpoint_web3_info_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/tx_receipt":{"get":{"tags":["Default DLT federation functions"],"summary":"Get transaction receipt","description":"Retrieves the transaction receipt details for a specified transaction hash.\n\nArgs:\n    - tx_hash (str): The transaction hash for which the receipt is requested.\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - blockHash (str): The hash of the block containing the transaction.\n        - blockNumber (int): The block number in which the transaction was included.\n        - transactionHash (str): The transaction hash.\n        - gasUsed (int): The amount of gas used for the transaction.\n        - cumulativeGasUsed (int): The cumulative gas used by all transactions in the block up to and including this one.\n        - status (int): Transaction status (`1` for success, `0` for failure).\n        - from_address (str): The sender’s address.\n        - to_address (str): The recipient’s address.\n        - logs (list): A list of event logs generated during the transaction.\n        - logsBloom (str): A bloom filter for quick searching of logs.\n        - effectiveGasPrice (int): The actual gas price paid for the transaction.\n\nRaises:\n    HTTPException:\n        - 500: If there is an issue retrieving the transaction receipt from the blockchain.","operationId":"tx_receipt_endpoint_tx_receipt_get","parameters":[{"name":"tx_hash","in":"query","required":true,"schema":{"type":"string","description":"The transaction hash to retrieve the receipt","title":"Tx Hash"},"description":"The transaction hash to retrieve the receipt"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionReceiptResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/register_domain":{"post":{"tags":["Default DLT federation functions"],"summary":"Register a new domain (operator)","description":"Registers a new domain (operator) in the federation.\n\n Args:\n    - name (str): The name of the domain to register as an operator.\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - tx_hash (str): The transaction hash of the sent registration transaction.\n\nRaises:\n    HTTPException:\n        - 500: If the domain is already registered or if there is an error during the registration process.","operationId":"register_domain_endpoint_register_domain_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DomainRegistrationRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/unregister_domain":{"delete":{"tags":["Default DLT federation functions"],"summary":"Unregisters an existing domain (operator)","description":"Unregisters an existing domain (operator) from the federation.\n\nArgs:\n    - None\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - tx_hash (str): The transaction hash of the sent unregistration transaction.\n\nRaises:\n    HTTPException:\n        - 500: If the domain is not registered or if there is an error during the unregistration process.","operationId":"unregister_domain_endpoint_unregister_domain_delete","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/create_service_announcement":{"post":{"tags":["Consumer DLT federation functions"],"summary":"Create service federation announcement","description":"Consumer announces the need for service federation. \n\nArgs:\n    requirements (str): The specific requirements for the requested service, formatted as:\n        'service=<docker_image/k8s_descriptor>;replicas=<container_replicas>'\n    endpoint_consumer (str): The consumer's network endpoint for establishing VXLAN connectivity, formatted as:\n        'ip_address=<ip_address>;vxlan_id=<vxlan_id>;vxlan_port=<vxlan_port>;federation_net=<federation_net>'\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - tx_hash (str): The transaction hash of the service announcement.\n        - service_id (str): The unique identifier for the service.\n\nRaises:\n    HTTPException:\n        - 400: If the 'requirements' or 'endpoint_consumer' formats are invalid.\n        - 500: If there is an error during the service announcement process.","operationId":"create_service_announcement_endpoint_create_service_announcement_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceAnnouncementRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/check_service_state":{"get":{"tags":["Default DLT federation functions"],"summary":"Get service state","description":"Returns the current state of a service by its service ID.\n\nArgs:\n    service_id (str): The unique identifier of the service whose state is being queried.\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - service_state (str): The current state of the service, which can be:\n            - 'open' (0)\n            - 'closed' (1)\n            - 'deployed' (2)\n            - 'unknown' if the state is unrecognized.\n\nRaises:\n    HTTPException:\n        - 500: If there is an error retrieving the service state.","operationId":"check_service_state_endpoint_check_service_state_get","parameters":[{"name":"service_id","in":"query","required":true,"schema":{"type":"string","description":"The service ID to check the state of","title":"Service Id"},"description":"The service ID to check the state of"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/check_deployed_info":{"get":{"tags":["Default DLT federation functions"],"summary":"Get deployed info","description":"Retrieves deployment information for a federated service.\n\nArgs:\n    service_id (str): The unique identifier of the deployed service.\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - federated_host (str): The external IP address of the deployed service.\n        - service_endpoint (str): The service endpoint where the consumer can access the deployed service.\n\nRaises:\n    HTTPException:\n        - 500: If there is an error retrieving the deployment information.","operationId":"check_deployed_info_endpoint_check_deployed_info_get","parameters":[{"name":"service_id","in":"query","required":true,"schema":{"type":"string","description":"The service ID to get the deployed info for the federated service","title":"Service Id"},"description":"The service ID to get the deployed info for the federated service"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/check_service_announcements":{"get":{"tags":["Provider DLT federation functions"],"summary":"Check service federation announcements","description":"Check for new service announcements in the last 20 blocks.\n\nReturns:\n    JSONResponse: A JSON object containing a list of service announcements, where each announcement includes:\n        - service_id (str): The unique identifier of the announced federated service.\n        - service_requirements (str): The requirements for the requested federated service.\n        - tx_hash (str): The transaction hash of the service announcement event.\n        - block_number (str): The block number where the service announcement was recorded.\n\nRaises:\n    HTTPException:\n        - 404: If no new service announcements are found within the last 20 blocks.\n        - 500: If an error occurs while processing the request or fetching the announcements.","operationId":"check_service_announcements_endpoint_check_service_announcements_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/place_bid":{"post":{"tags":["Provider DLT federation functions"],"summary":"Place a bid","description":"Place a bid for a service announcement.\n\nArgs:\n    request (PlaceBidRequest): A Pydantic model containing the following fields:\n        - service_id (str): The unique identifier of the service being bid on.\n        - service_price (int): The price the provider is offering for the service.\n        - endpoint_provider (str): The provider's VXLAN endpoint, in the format:\n            'ip_address=<ip_address>;vxlan_id=<vxlan_id>;vxlan_port=<vxlan_port>;federation_net=<federation_net>'.\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - tx_hash (str): The transaction hash of the submitted bid.\n\nRaises:\n    HTTPException: \n        - 400: If the provided endpoint format is invalid.\n        - 500: If there is an internal server error during bid submission.","operationId":"place_bid_endpoint_place_bid_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PlaceBidRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/check_bids":{"get":{"tags":["Consumer DLT federation functions"],"summary":"Check bids","description":"Check for bids placed on a specific service.\n\nArgs:\n    service_id (str): The unique identifier of the service to check for bids.\n\nReturns:\n    dict: A JSON response containing:\n        - bid_index (str): The index of the highest bid.\n        - provider_address (str): The blockchain address of the bidding provider.\n        - service_price (str): The price offered for the service.\n\nRaises:\n    HTTPException: If no bids are found or if there is an internal server error.","operationId":"check_bids_endpoint_check_bids_get","parameters":[{"name":"service_id","in":"query","required":true,"schema":{"type":"string","description":"The service ID to check bids for","title":"Service Id"},"description":"The service ID to check bids for"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/choose_provider":{"post":{"tags":["Consumer DLT federation functions"],"summary":"Choose provider","description":"Choose a provider from the bids received for a federated service.\n\nArgs:\n    request (ChooseProviderRequest): A Pydantic model containing the following fields:\n        - service_id (str): The unique identifier of the service for which the provider is being selected.\n        - bid_index (int): The index of the bid representing the chosen provider.\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - tx_hash (str): The transaction hash of the sent transaction for choosing the provider.\n\nRaises:\n    HTTPException: \n        - 500: If there is an internal server error during the provider selection process.","operationId":"choose_provider_endpoint_choose_provider_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChooseProviderRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/check_winner":{"get":{"tags":["Provider DLT federation functions"],"summary":"Check for winner","description":"Check if a winner has been chosen for a specific service in the federation.\n\nArgs:\n    service_id (str): The unique identifier of the service for which the winner is being checked.\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - winner-chosen (str): 'yes' if a winner has been selected, otherwise 'no'.\n\nRaises:\n    HTTPException:\n        - 500: If there is an internal server error while checking for the winner.","operationId":"check_winner_endpoint_check_winner_get","parameters":[{"name":"service_id","in":"query","required":true,"schema":{"type":"string","description":"The service ID to check if there is a winner provider in the federation","title":"Service Id"},"description":"The service ID to check if there is a winner provider in the federation"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/check_if_i_am_winner":{"get":{"tags":["Provider DLT federation functions"],"summary":"Check if I am winner","description":"Check if the calling provider is the winner for a specific service.\n\nArgs:\n    service_id (str): The unique identifier of the service for which the provider's winner status is being checked.\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - am-i-winner (str): 'yes' if the calling provider is the winner of the service, otherwise 'no'.\n\nRaises:\n    HTTPException:\n        - 500: If there is an internal server error while checking the winner status.","operationId":"check_if_I_am_Winner_endpoint_check_if_i_am_winner_get","parameters":[{"name":"service_id","in":"query","required":true,"schema":{"type":"string","description":"The service ID to check if I am the winner provider in the federation","title":"Service Id"},"description":"The service ID to check if I am the winner provider in the federation"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/service_deployed":{"post":{"tags":["Provider DLT federation functions"],"summary":"Confirm service deployment","description":"Confirm the successful deployment of a service by the provider.\n\nArgs:\n    request (ServiceDeployedRequest): The request object containing:\n        - service_id (str): The unique identifier of the deployed service.\n        - federated_host (str): The external IP address where the service is hosted.\n\nReturns:\n    JSONResponse: A JSON object containing:\n        - tx_hash (str): The transaction hash of the confirmation sent to the blockchain.\n\nRaises:\n    HTTPException:\n        - 404: If the calling provider is not the winner of the service.\n        - 500: If there is an internal server error during the confirmation process.","operationId":"service_deployed_endpoint_service_deployed_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceDeployedRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/simulate_consumer_federation_process":{"post":{"tags":["Consumer DLT federation functions"],"summary":"Simulate Consumer Federation Process","description":"Simulates the consumer-side service federation process, including the following steps:\n\n- Announcing the service federation request.\n- Waiting for bids from providers.\n- Evaluating and selecting the best bid.\n- Waiting for provider confirmation and service deployment.\n- Establishing a VXLAN connection with the provider.\n\nThis function performs the entire consumer-side process, from service announcement to deployment confirmation,\nand establishes the required VXLAN tunnel for communication between the consumer and provider.\n\nArgs:\n- request (ConsumerFederationProcessRequest): Contains the service requirements, consumer endpoint, and other optional parameters such as VIM (Docker or Kubernetes) and number of service providers.\n\nReturns:\n- JSONResponse: A JSON object with the following keys:\n    - message (str): A message confirming the successful completion of the federation process.\n    - federated_host (str): The IP address of the federated host.\n\nRaises:\n- HTTPException:\n    - 400: If the provided 'requirements' or 'endpoint' format is invalid.\n    - 500: If any error occurs during the federation process.","operationId":"simulate_consumer_federation_process_simulate_consumer_federation_process_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConsumerFederationProcessRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/simulate_provider_federation_process":{"post":{"tags":["Provider DLT federation functions"],"summary":"Simulate Provider Federation Process","description":"Simulates the provider-side service federation process, including the following steps:\n\n- Waiting for service announcements.\n- Submitting a bid offer for the service.\n- Waiting for the consumer to choose a winner.\n- Deploying the federated service if selected as the winner.\n\nArgs:\n- request (ProviderFederationProcessRequest): Contains details such as the service price, endpoint, and VIM options (Docker or Kubernetes).\n\nReturns:\n- JSONResponse: A message confirming the successful completion of the federation process, or an error if the provider was not chosen.\n\nSteps:\n1. **Service Announcement**: The provider subscribes to the service announcement events and waits for a new service to be announced.\n2. **Bid Placement**: The provider places a bid for the service, offering a price and providing its VXLAN endpoint details.\n3. **Bid Evaluation**: The provider waits for the consumer to evaluate bids and select a winner.\n4. **Service Deployment**: If the provider wins, the service is deployed, either via Docker or Kubernetes.\n5. **Deployment Confirmation**: The provider confirms the deployment on the blockchain and the process ends.\n\nRaises:\n- HTTPException: \n    - 500: If an error occurs during any step of the federation process or if the provider is not selected.","operationId":"simulate_provider_federation_process_simulate_provider_federation_process_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProviderFederationProcessRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/deploy_docker_service":{"post":{"tags":["Docker Functions"],"summary":"Deploy docker service","operationId":"deploy_docker_service_endpoint_deploy_docker_service_post","parameters":[{"name":"image","in":"query","required":true,"schema":{"type":"string","title":"Image"}},{"name":"name","in":"query","required":true,"schema":{"type":"string","title":"Name"}},{"name":"network","in":"query","required":false,"schema":{"type":"string","default":"bridge","title":"Network"}},{"name":"replicas","in":"query","required":false,"schema":{"type":"integer","default":1,"title":"Replicas"}},{"name":"env_vars","in":"query","required":false,"schema":{"type":"string","title":"Env Vars"}},{"name":"container_port","in":"query","required":false,"schema":{"type":"integer","title":"Container Port"}},{"name":"host_port","in":"query","required":false,"schema":{"type":"integer","title":"Host Port"}},{"name":"command","in":"query","required":false,"schema":{"type":"string","default":"sh -c \"trap : TERM INT; sleep infinity & wait\"","title":"Command"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/delete_docker_service":{"delete":{"tags":["Docker Functions"],"summary":"Delete docker service","operationId":"delete_docker_service_endpoint_delete_docker_service_delete","parameters":[{"name":"name","in":"query","required":true,"schema":{"type":"string","title":"Name"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/configure_docker_network_resources":{"post":{"tags":["Docker Functions"],"summary":"Configure Docker network and VXLAN","operationId":"configure_docker_network_and_vxlan_endpoint_configure_docker_network_resources_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DockerNetworkConfigRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/delete_docker_network_resources":{"delete":{"tags":["Docker Functions"],"summary":"Delete Docker network and VXLAN","operationId":"delete_docker_network_and_vxlan_endpoint_delete_docker_network_resources_delete","parameters":[{"name":"vxlan_id","in":"query","required":false,"schema":{"type":"string","default":"200","title":"Vxlan Id"}},{"name":"net_name","in":"query","required":false,"schema":{"type":"string","default":"federation-net","title":"Net Name"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/execute_command_in_docker_container":{"post":{"tags":["Docker Functions"],"summary":"Execute a command in a Docker Container","operationId":"execute_command_in_docker_container_endpoint_execute_command_in_docker_container_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ContainerCommandRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/deploy_kubernetes_service":{"post":{"tags":["Kubernetes Functions"],"summary":"Create k8s resource from available YAML files","operationId":"deploy_kubernetes_service_endpoint_deploy_kubernetes_service_post","parameters":[{"name":"descriptor","in":"query","required":true,"schema":{"type":"string","title":"Descriptor"}},{"name":"kubeconfig_path","in":"query","required":false,"schema":{"type":"string","default":"/etc/rancher/k3s/k3s.yaml","title":"Kubeconfig Path"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/delete_kubernetes_service":{"delete":{"tags":["Kubernetes Functions"],"summary":"Delete k8s resource from available YAML files","operationId":"delete_kubernetes_service_endpoint_delete_kubernetes_service_delete","parameters":[{"name":"descriptor","in":"query","required":true,"schema":{"type":"string","title":"Descriptor"}},{"name":"kubeconfig_path","in":"query","required":false,"schema":{"type":"string","default":"/etc/rancher/k3s/k3s.yaml","title":"Kubeconfig Path"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/configure_kubernetes_network_resources":{"post":{"tags":["Kubernetes Functions"],"summary":"Configure Kubernetes network and VXLAN","operationId":"configure_kubernetes_network_and_vxlan_endpoint_configure_kubernetes_network_resources_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/KubernetesNetworkConfigRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/delete_kubernetes_network_resources":{"delete":{"tags":["Kubernetes Functions"],"summary":"Delete Kubernetes network and VXLAN","operationId":"delete_kubernetes_network_and_vxlan_endpoint_delete_kubernetes_network_resources_delete","parameters":[{"name":"vxlan_id","in":"query","required":false,"schema":{"type":"string","default":"200","title":"Vxlan Id"}},{"name":"net_name","in":"query","required":false,"schema":{"type":"string","default":"federation-net","title":"Net Name"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/execute_command_in_kubernetes_pod":{"post":{"tags":["Kubernetes Functions"],"summary":"Execute a command in a Kubernetes Pod","operationId":"execute_command_in_kubernetes_pod_endpoint_execute_command_in_kubernetes_pod_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ContainerCommandRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}}},"components":{"schemas":{"ChooseProviderRequest":{"properties":{"bid_index":{"type":"integer","title":"Bid Index"},"service_id":{"type":"string","title":"Service Id"}},"type":"object","required":["bid_index","service_id"],"title":"ChooseProviderRequest"},"ConsumerFederationProcessRequest":{"properties":{"vim":{"$ref":"#/components/schemas/VIMOptions"},"export_to_csv":{"anyOf":[{"type":"boolean"},{"type":"null"}],"title":"Export To Csv","default":false},"service_providers":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Service Providers","default":1},"endpoint_consumer":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Endpoint Consumer","default":"ip_address=172.18.0.10;vxlan_id=200;vxlan_port=4789;federation_net=10.0.0.0/16"},"requirements":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Requirements","default":"service=alpine;replicas=1"}},"type":"object","required":["vim"],"title":"ConsumerFederationProcessRequest"},"ContainerCommandRequest":{"properties":{"name":{"type":"string","title":"Name"},"command":{"type":"string","title":"Command"},"namespace":{"type":"string","title":"Namespace","default":"default"},"kubeconfig_path":{"type":"string","title":"Kubeconfig Path","default":"/etc/rancher/k3s/k3s.yaml"}},"type":"object","required":["name","command"],"title":"ContainerCommandRequest"},"DockerNetworkConfigRequest":{"properties":{"local_ip":{"type":"string","title":"Local Ip"},"remote_ip":{"type":"string","title":"Remote Ip"},"interface_name":{"type":"string","title":"Interface Name"},"vxlan_id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Vxlan Id","default":"200"},"dst_port":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Dst Port","default":"4789"},"subnet":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Subnet","default":"10.0.0.0/16"},"ip_range":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Ip Range","default":"10.0.1.0/24"},"net_name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Net Name","default":"federation-net"}},"type":"object","required":["local_ip","remote_ip","interface_name"],"title":"DockerNetworkConfigRequest"},"DomainRegistrationRequest":{"properties":{"name":{"type":"string","title":"Name"}},"type":"object","required":["name"],"title":"DomainRegistrationRequest"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"KubernetesNetworkConfigRequest":{"properties":{"local_ip":{"type":"string","title":"Local Ip"},"remote_ip":{"type":"string","title":"Remote Ip"},"interface_name":{"type":"string","title":"Interface Name"},"vxlan_id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Vxlan Id","default":"200"},"dst_port":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Dst Port","default":"4789"},"subnet":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Subnet","default":"10.0.0.0/16"},"ip_range":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Ip Range","default":"10.0.1.1-10.0.1.255"},"net_name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Net Name","default":"federation-net"}},"type":"object","required":["local_ip","remote_ip","interface_name"],"title":"KubernetesNetworkConfigRequest"},"PlaceBidRequest":{"properties":{"service_id":{"type":"string","title":"Service Id"},"service_price":{"type":"integer","title":"Service Price"},"endpoint_provider":{"type":"string","title":"Endpoint Provider"}},"type":"object","required":["service_id","service_price","endpoint_provider"],"title":"PlaceBidRequest"},"ProviderFederationProcessRequest":{"properties":{"vim":{"$ref":"#/components/schemas/VIMOptions"},"export_to_csv":{"anyOf":[{"type":"boolean"},{"type":"null"}],"title":"Export To Csv","default":false},"service_price":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Service Price","default":10},"endpoint_provider":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Endpoint Provider","default":"ip_address=172.18.0.10;vxlan_id=200;vxlan_port=4789;federation_net=10.0.0.0/16"}},"type":"object","required":["vim"],"title":"ProviderFederationProcessRequest"},"ServiceAnnouncementRequest":{"properties":{"requirements":{"type":"string","title":"Requirements"},"endpoint_consumer":{"type":"string","title":"Endpoint Consumer"}},"type":"object","required":["requirements","endpoint_consumer"],"title":"ServiceAnnouncementRequest"},"ServiceDeployedRequest":{"properties":{"service_id":{"type":"string","title":"Service Id"},"federated_host":{"type":"string","title":"Federated Host"}},"type":"object","required":["service_id","federated_host"],"title":"ServiceDeployedRequest"},"TransactionReceiptResponse":{"properties":{"blockHash":{"type":"string","title":"Blockhash"},"blockNumber":{"type":"integer","title":"Blocknumber"},"transactionHash":{"type":"string","title":"Transactionhash"},"gasUsed":{"type":"integer","title":"Gasused"},"cumulativeGasUsed":{"type":"integer","title":"Cumulativegasused"},"status":{"type":"integer","title":"Status"},"from_address":{"type":"string","title":"From Address"},"to_address":{"type":"string","title":"To Address"},"logs":{"items":{},"type":"array","title":"Logs"},"logsBloom":{"type":"string","title":"Logsbloom"},"effectiveGasPrice":{"type":"integer","title":"Effectivegasprice"}},"type":"object","required":["blockHash","blockNumber","transactionHash","gasUsed","cumulativeGasUsed","status","from_address","to_address","logs","logsBloom","effectiveGasPrice"],"title":"TransactionReceiptResponse"},"VIMOptions":{"type":"string","enum":["docker","kubernetes"],"title":"VIMOptions"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}}},"tags":[{"name":"Default DLT federation functions","description":"Functions for consumer and provider domains."},{"name":"Consumer DLT federation functions","description":"Functions for consumer domains."},{"name":"Provider DLT federation functions","description":"Functions for provider domains."},{"name":"Docker Functions","description":"Manage and deploy services in Docker."},{"name":"Kubernetes Functions","description":"Manage and deploy services in Kubernetes."}]}